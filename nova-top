#!/usr/bin/env python

import curses
from itertools import count
import locale
import sys

from novaclient import client
from novaclient import exceptions as exc
from novaclient import shell
from novaclient import utils

__version__ = "0.2"

instances = {} # master instance list
selected_instance = None # ID of currently selected instance
screen_delay = .1 # seconds between screen updates
update_delay = 2 # seconds between instance list updates
tick = -1 # internal counter incremented in main event loop
title = "nova top"
instructions = """(t)erminate instance | console (o)utput
(q)uit
up(j)/down(k) changes selection
"""
no_instances = "Aww, no instances are running!!"
screen_width = None
scr_fg_colour = curses.COLOR_GREEN
scr_bg_colour = 0
window_fg_colour = curses.COLOR_GREEN
window_bg_colour = 16
console_lines = 100

conn = None

class BadCredentials(Exception):
    pass

def move_selection(reverse=False):
    """
    Goes through the list of instances, setting the selected as the one after
    the currently selected.
    """
    global selected_instance
    if selected_instance not in instances:
        selected_instance = None
    found = False
    pids = sorted(instances.keys(), reverse=reverse)
    # Iterate items twice to enable wrapping.
    for pid in pids + pids:
        if selected_instance is None or found:
            selected_instance = pid
            return
        found = pid == selected_instance

def update_instances():
    """
    Updates the dict of instances.
    """

    global instances

    global tick
    tick += 1
    if (tick * screen_delay) % update_delay != 0:
        return
    tick = 0

    results = conn.servers.list()
    instances = {}
    for result in results:
        instances[result.id] = result

def handle_keypress(screen):
    """
    Check for a key being pressed and handle it if applicable.
    """
    global selected_instance
    global selected_instance
    try:
        key = screen.getkey().upper()
    except:
        return
    if key in ("KEY_DOWN", "J"):
        move_selection()
    elif key in ("KEY_UP", "K"):
        move_selection(reverse=True)
    elif key in ("O",):
        if selected_instance in instances:
            instance = conn.servers.get(selected_instance)
            result = instance.get_console_output(console_lines)
            # FIXME: use a pad and let the user scroll through the output
            y, x = screen.getmaxyx()
            mypad = curses.newpad(console_lines + 1, x)
            mypad.bkgdset(' ', curses.color_pair(1))
            mypad_pos = 0
            for i, line in enumerate(result.split('\n')):
                mypad.addstr(i, 0, line, curses.A_NORMAL)
            text = "(q) return | (j) scroll up | (k) scroll down"
            screen.addstr(y - 1, 0, text.center(x - 1), curses.A_NORMAL)
            while True:
                mypad.refresh(mypad_pos, 0, 0, 0, y - 2, x - 1)
                try:
                    key = screen.getkey().upper()
                except:
                    continue
                if key in ("KEY_DOWN", "J"):
                    mypad_pos -= 1
                    if mypad_pos < 0:
                        mypad_pos = 0
                elif key in ("KEY_UP", "K"):
                    mypad_pos += 1
                    if mypad_pos > console_lines:
                        mypad_pos = console_lines
                elif key in ("Q",):
                    break;
    elif key in ("T",):
        if selected_instance in instances:
            instance = conn.servers.get(selected_instance)
            instance.delete()
            tick = 0
            move_selection()
    elif key in ("Q",):
        raise KeyboardInterrupt

def format_row(inst=None):
    """
    Applies consistant padding to each of the columns in a row and serves as
    the source of the overall screen width.
    """
    if inst:
        inst_id = inst.id
        status = inst.status
        ip = inst.addresses.values()[0][0]['addr']
        flavor = inst.flavor['id']
    else:
        inst_id = 'ID'
        status = 'STATUS'
        ip = 'IP'
        flavor = 'FLAVOR'
    row = " %-20.20s %-10.10s %-20.20s %-12.12s " % (inst_id, status,
                                                     ip, flavor)
    global screen_width
    if screen_width is None:
        screen_width = len(row)
    return row

def display_output(screen):
    """
    Display the menu list of instances.
    """
    format_row() # Sets up the screen width.
    screen_height = len(instances) + len(instructions.split("\n")) + 9
    if not instances:
        screen_height += 2 # A couple of blank lines are added when empty.
    screen.erase()
    win = curses.newwin(screen_height, screen_width + 6, 1, 3)
    win.bkgd(" ", curses.color_pair(1))
    win.border()
    x = 3
    blank_line = y = count(2).next
    win.addstr(y(), x, title.center(screen_width), curses.A_NORMAL)
    blank_line()
    win.addstr(y(), x, format_row(), curses.A_STANDOUT)
    if not instances:
        blank_line()
        win.addstr(y(), x, no_instances.center(screen_width), curses.A_NORMAL)
        blank_line()
    else:
        win.hline(y(), x, curses.ACS_HLINE, screen_width)
        for (i, pid) in enumerate(sorted(instances.keys())):
            if pid != selected_instance:
                attr = curses.A_NORMAL
            else:
                attr = curses.A_STANDOUT
            win.addstr(y(), x, format_row(instances[pid]), attr)
    win.hline(y(), x, curses.ACS_HLINE, screen_width)
    blank_line()
    for line in instructions.split("\n"):
        win.addstr(y(), x, line.center(screen_width), curses.A_NORMAL)
    win.refresh()

def get_client(argv):
    """Mostly copied from novaclient shell.main()"""
    # strip any args passed in and use help commmand for shell parser
    argv = [arg for arg in argv if arg.startswith('-')] + ['help']
    sh = shell.OpenStackComputeShell()
    parser = sh.get_base_parser()
    (options, args) = parser.parse_known_args(argv)

    # build available subcommands based on version
    sh.extensions = sh._discover_extensions(options.version)
    sh._run_extension_hooks('__pre_parse_args__')

    subcommand_parser = sh.get_subcommand_parser(options.version)
    sh.parser = subcommand_parser

    args = subcommand_parser.parse_args(argv)
    sh._run_extension_hooks('__post_parse_args__', args)

    (os_username, os_password, os_tenant_name, os_auth_url,
            os_region_name, endpoint_type,
            insecure, service_type, service_name,
            username, apikey, projectid, url, region_name) = (
                    args.os_username, args.os_password,
                    args.os_tenant_name, args.os_auth_url,
                    args.os_region_name, args.endpoint_type,
                    args.insecure, args.service_type, args.service_name,
                    args.username, args.apikey, args.projectid,
                    args.url, args.region_name)

    if not endpoint_type:
        endpoint_type = shell.DEFAULT_NOVA_ENDPOINT_TYPE

    if not service_type:
        service_type = shell.DEFAULT_NOVA_SERVICE_TYPE
        service_type = utils.get_service_type(args.func) or service_type

    if not utils.isunauthenticated(args.func):
        if not os_username:
            if not username:
                raise exc.CommandError("You must provide a username "
                        "via either --os_username or env[OS_USERNAME]")
            else:
                os_username = username

        if not os_password:
            if not apikey:
                raise exc.CommandError("You must provide a password "
                        "via either --os_password or via "
                        "env[OS_PASSWORD]")
            else:
                os_password = apikey

        if not os_tenant_name:
            if not projectid:
                raise exc.CommandError("You must provide a tenant name "
                        "via either --os_tenant_name or "
                        "env[OS_TENANT_NAME]")
            else:
                os_tenant_name = projectid

        if not os_auth_url:
            if not url:
                raise exc.CommandError("You must provide an auth url "
                        "via either --os_auth_url or env[OS_AUTH_URL]")
            else:
                os_auth_url = url

        if not os_region_name and region_name:
            os_region_name = region_name

    if options.version and options.version != '1.0':
        if not os_tenant_name:
            raise exc.CommandError("You must provide a tenant name "
                    "via either --os_tenant_name or env[OS_TENANT_NAME]")

        if not os_auth_url:
            raise exc.CommandError("You must provide an auth url "
                    "via either --os_auth_url or env[OS_AUTH_URL]")

    cs = client.Client(options.version, os_username, os_password,
                            os_tenant_name, os_auth_url, insecure,
                            region_name=os_region_name,
                            endpoint_type=endpoint_type,
                            extensions=sh.extensions,
                            service_type=service_type,
                            service_name=service_name)
    try:
        if not utils.isunauthenticated(args.func):
            cs.authenticate()
    except exc.Unauthorized:
        raise exc.CommandError("Invalid OpenStack Nova credentials.")
    except exc.AuthorizationFailure:
        raise exc.CommandError("Unable to authorize user")
    return cs

def main(stdscr):
    """
    Main entry point for nova top.
    """
    global conn
    conn = get_client(sys.argv[1:])

    curses.curs_set(False)
    stdscr.keypad(True)
    stdscr.nodelay(True)
    curses.init_pair(1, window_fg_colour, window_bg_colour)
    curses.init_pair(2, scr_fg_colour, scr_bg_colour)
    stdscr.bkgdset(' ', curses.color_pair(2))
    while True:
        try:
            update_instances()
            handle_keypress(stdscr)
            display_output(stdscr)
            curses.napms(int(screen_delay * 1000))
        except KeyboardInterrupt:
            break

if __name__ == "__main__":
    locale.setlocale(locale.LC_ALL, "")
    try:
        curses.wrapper(main)
    except exc.CommandError as ex:
        print unicode(ex)
        sys.exit(1)
